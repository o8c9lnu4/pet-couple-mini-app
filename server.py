#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram Mini App
"""

import http.server
import socketserver
import os
import ssl
from urllib.parse import urlparse

class CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()
    
    def do_OPTIONS(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
        self.send_response(200)
        self.end_headers()

def create_ssl_context():
    """–°–æ–∑–¥–∞–Ω–∏–µ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è HTTPS"""
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    try:
        context.load_cert_chain('cert.pem', 'key.pem')
        return context
    except FileNotFoundError:
        print("‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ HTTPS.")
        return None

def generate_self_signed_cert():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    try:
        from cryptography import x509
        from cryptography.x509.oid import NameOID
        from cryptography.hazmat.primitives import hashes, serialization
        from cryptography.hazmat.primitives.asymmetric import rsa
        from datetime import datetime, timedelta
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        subject = issuer = x509.Name([
            x509.NameAttribute(NameOID.COUNTRY_NAME, "RU"),
            x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, "Moscow"),
            x509.NameAttribute(NameOID.LOCALITY_NAME, "Moscow"),
            x509.NameAttribute(NameOID.ORGANIZATION_NAME, "Pet Tamagotchi"),
            x509.NameAttribute(NameOID.COMMON_NAME, "localhost"),
        ])
        
        cert = x509.CertificateBuilder().subject_name(
            subject
        ).issuer_name(
            issuer
        ).public_key(
            private_key.public_key()
        ).serial_number(
            x509.random_serial_number()
        ).not_valid_before(
            datetime.utcnow()
        ).not_valid_after(
            datetime.utcnow() + timedelta(days=365)
        ).add_extension(
            x509.SubjectAlternativeName([
                x509.DNSName("localhost"),
                x509.IPAddress("127.0.0.1"),
            ]),
            critical=False,
        ).sign(private_key, hashes.SHA256())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á
        with open("cert.pem", "wb") as f:
            f.write(cert.public_bytes(serialization.Encoding.PEM))
        
        with open("key.pem", "wb") as f:
            f.write(private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            ))
        
        print("‚úÖ –°–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω!")
        return True
        
    except ImportError:
        print("‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ cryptography:")
        print("pip install cryptography")
        return False

def main():
    PORT = 8000
    HTTPS_PORT = 8443
    
    print("üêæ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Telegram Mini App")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('index.html'):
        print("‚ùå –§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏–∑ –ø–∞–ø–∫–∏ mini_app/")
        return
    
    # –°–æ–∑–¥–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not os.path.exists('cert.pem') or not os.path.exists('key.pem'):
        print("üîê –°–æ–∑–¥–∞–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...")
        if generate_self_signed_cert():
            print("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ HTTPS")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    try:
        with socketserver.TCPServer(("", PORT), CustomHTTPRequestHandler) as httpd:
            print(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{PORT}")
            print(f"üì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:{PORT}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
            if os.path.exists('cert.pem') and os.path.exists('key.pem'):
                try:
                    with socketserver.TCPServer(("", HTTPS_PORT), CustomHTTPRequestHandler) as httpsd:
                        context = create_ssl_context()
                        if context:
                            httpsd.socket = context.wrap_socket(httpsd.socket, server_side=True)
                            print(f"üîí HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://localhost:{HTTPS_PORT}")
                            print(f"üì± –î–ª—è Telegram Mini App –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://localhost:{HTTPS_PORT}")
                            
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
                            import threading
                            https_thread = threading.Thread(target=httpsd.serve_forever)
                            https_thread.daemon = True
                            https_thread.start()
                            
                            print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram:")
                            print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok –¥–ª—è —Ç—É–Ω–Ω–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è:")
                            print("   ngrok http 8443")
                            print("2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ HTTPS URL –∏–∑ ngrok")
                            print("3. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ BotFather")
                            
                except Exception as e:
                    print(f"‚ö†Ô∏è HTTPS —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω: {e}")
            
            print("\nüõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            httpd.serve_forever()
            
    except KeyboardInterrupt:
        print("\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

if __name__ == "__main__":
    main() 