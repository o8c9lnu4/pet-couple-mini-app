// Telegram Web App API
let tg = window.Telegram.WebApp;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
tg.ready();
tg.expand();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
tg.setHeaderColor('#667eea');
tg.setBackgroundColor('#667eea');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let currentPet = null;
let currentCouple = null;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PET_TYPES = {
    cat: { emoji: 'üê±', name: '–ö–æ—Ç–∏–∫' },
    dog: { emoji: 'üêï', name: '–ü—ë—Å–∏–∫' },
    rabbit: { emoji: 'üê∞', name: '–ö—Ä–æ–ª–∏–∫' }
};

const ACTIONS = {
    feed: { emoji: 'üçΩÔ∏è', name: '–ü–æ–∫–æ—Ä–º–∏—Ç—å', hunger: 30, happiness: 5, energy: 0 },
    play: { emoji: 'üéæ', name: '–ü–æ–∏–≥—Ä–∞—Ç—å', hunger: -5, happiness: 25, energy: -10 },
    sleep: { emoji: 'üò¥', name: '–£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å', hunger: -2, happiness: 0, energy: 40 },
    pet: { emoji: 'ü§ó', name: '–ü–æ–≥–ª–∞–¥–∏—Ç—å', hunger: 0, happiness: 15, energy: 0 }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    initApp();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        currentUser = tg.initDataUnsafe?.user || {
            id: Math.floor(Math.random() * 1000000),
            first_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        };
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document.getElementById('my-id').textContent = currentUser.id;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞
        await loadUserData();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞
        await loadPetData();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updatePetDisplay();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData() {
    try {
        const response = await fetch(`http://localhost:8000/api/user?user_id=${currentUser.id}`);
        if (response.ok) {
            const userData = await response.json();
            currentUser.hasCouple = userData.has_couple;
            currentUser.coupleId = userData.couple_id;
            
            if (userData.has_couple) {
                await loadCoupleData();
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        currentUser.hasCouple = false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—ã
async function loadCoupleData() {
    try {
        const response = await fetch(`http://localhost:8000/api/couple?user_id=${currentUser.id}`);
        if (response.ok) {
            currentCouple = await response.json();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—ã:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–∞
async function loadPetData() {
    try {
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–∞—Ä–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
        if (currentUser.hasCouple && currentUser.coupleId) {
            const response = await fetch(`http://localhost:8000/api/pet?couple_id=${currentUser.coupleId}`);
            if (response.ok) {
                const petData = await response.json();
                currentPet = {
                    id: petData.id,
                    name: petData.name,
                    type: petData.type,
                    hunger: petData.hunger,
                    happiness: petData.happiness,
                    energy: petData.energy,
                    level: petData.level,
                    experience: petData.experience,
                    lastUpdated: petData.last_updated
                };
                return;
            }
        }
        
        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø–∞—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        const savedPet = localStorage.getItem('pet_data');
        if (savedPet) {
            currentPet = JSON.parse(savedPet);
        } else {
            currentPet = createDemoPet();
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Ç–æ–º—Ü–∞:', error);
        currentPet = createDemoPet();
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–ø–∏—Ç–æ–º—Ü–∞
function createDemoPet() {
    return {
        id: 1,
        name: '–ú—É—Ä–∑–∏–∫',
        type: 'cat',
        hunger: 80,
        happiness: 90,
        energy: 75,
        level: 1,
        experience: 25,
        lastUpdated: new Date().toISOString()
    };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
function updatePetDisplay() {
    if (!currentPet) return;
    
    const petType = PET_TYPES[currentPet.type];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–∏—Ç–æ–º—Ü–∞
    document.getElementById('pet-emoji').textContent = petType.emoji;
    document.getElementById('pet-name').textContent = currentPet.name;
    document.getElementById('pet-description').textContent = getPetDescription(currentPet);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('hunger-bar').style.width = currentPet.hunger + '%';
    document.getElementById('hunger-value').textContent = currentPet.hunger + '/100';
    
    document.getElementById('happiness-bar').style.width = currentPet.happiness + '%';
    document.getElementById('happiness-value').textContent = currentPet.happiness + '/100';
    
    document.getElementById('energy-bar').style.width = currentPet.energy + '%';
    document.getElementById('energy-value').textContent = currentPet.energy + '/100';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
    document.getElementById('pet-level').textContent = currentPet.level;
    document.getElementById('pet-exp').textContent = currentPet.experience;
    document.getElementById('pet-exp-max').textContent = currentPet.level * 100;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    document.getElementById('stat-level').textContent = currentPet.level;
    document.getElementById('stat-exp').textContent = currentPet.experience + '/' + (currentPet.level * 100);
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞
function getPetDescription(pet) {
    const descriptions = [];
    
    if (pet.hunger <= 20) {
        descriptions.push('–æ—á–µ–Ω—å –≥–æ–ª–æ–¥–µ–Ω');
    } else if (pet.hunger <= 40) {
        descriptions.push('–≥–æ–ª–æ–¥–µ–Ω');
    }
    
    if (pet.happiness <= 20) {
        descriptions.push('–æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω—ã–π');
    } else if (pet.happiness <= 40) {
        descriptions.push('–≥—Ä—É—Å—Ç–Ω—ã–π');
    } else if (pet.happiness >= 80) {
        descriptions.push('–æ—á–µ–Ω—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–π');
    }
    
    if (pet.energy <= 20) {
        descriptions.push('–æ—á–µ–Ω—å —É—Å—Ç–∞–ª');
    } else if (pet.energy <= 40) {
        descriptions.push('—É—Å—Ç–∞–ª');
    } else if (pet.energy >= 80) {
        descriptions.push('–ø–æ–ª–æ–Ω —ç–Ω–µ—Ä–≥–∏–∏');
    }
    
    if (descriptions.length === 0) {
        descriptions.push('—á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è —Ö–æ—Ä–æ—à–æ');
    }
    
    return descriptions.join(', ');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —ç–∫—Ä–∞–Ω–æ–≤
    if (screenId === 'pet-status' || screenId === 'statistics') {
        updatePetDisplay();
    }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ID
function copyMyId() {
    const myId = document.getElementById('my-id').textContent;
    
    if (navigator.clipboard) {
        navigator.clipboard.writeText(myId).then(() => {
            showSuccess('ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
        });
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = myId;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        showSuccess('ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã
async function createCouple() {
    const partnerId = document.getElementById('partner-id').value;
    
    if (!partnerId) {
        showError('–í–≤–µ–¥–∏—Ç–µ ID –ø–∞—Ä—Ç–Ω–µ—Ä–∞');
        return;
    }
    
    if (partnerId == currentUser.id) {
        showError('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É —Å —Å–∞–º–∏–º —Å–æ–±–æ–π');
        return;
    }
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('http://localhost:8000/api/couple/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                user1_id: currentUser.id,
                user2_id: parseInt(partnerId),
                user1_name: currentUser.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1',
                user2_name: '–ü–∞—Ä—Ç–Ω–µ—Ä'
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            currentUser.hasCouple = true;
            currentUser.coupleId = result.couple_id;
            
            showSuccess('–ü–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞.');
            showScreen('main-menu');
        } else {
            showError(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã:', error);
        showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–∏—Ç–æ–º—Ü–µ–º
async function performAction(actionType) {
    if (!currentPet) {
        showError('–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞');
        return;
    }
    
    const action = ACTIONS[actionType];
    if (!action) {
        showError('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
        return;
    }
    
    try {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        currentPet.hunger = Math.max(0, Math.min(100, currentPet.hunger + action.hunger));
        currentPet.happiness = Math.max(0, Math.min(100, currentPet.happiness + action.happiness));
        currentPet.energy = Math.max(0, Math.min(100, currentPet.energy + action.energy));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
        const expGain = calculateExpGain(actionType, currentPet);
        currentPet.experience += expGain;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
        if (currentPet.experience >= currentPet.level * 100) {
            currentPet.level += 1;
            currentPet.experience = 0;
            showLevelUp();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        currentPet.lastUpdated = new Date().toISOString();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        localStorage.setItem('pet_data', JSON.stringify(currentPet));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updatePetDisplay();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        showActionResult(action, expGain);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:', error);
        showError('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è');
    }
}

// –†–∞—Å—á–µ—Ç –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ –æ–ø—ã—Ç–∞
function calculateExpGain(actionType, pet) {
    const baseExp = {
        feed: 5,
        play: 15,
        sleep: 10,
        pet: 8
    };
    
    const happinessBonus = Math.floor(pet.happiness / 20);
    return baseExp[actionType] + happinessBonus;
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è
function showActionResult(action, expGain) {
    const resultDiv = document.getElementById('action-result');
    const resultEmoji = document.getElementById('result-emoji');
    const resultText = document.getElementById('result-text');
    
    resultEmoji.textContent = action.emoji;
    resultText.textContent = `${action.name} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${expGain} –æ–ø—ã—Ç–∞`;
    
    resultDiv.classList.remove('hidden');
    
    // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        resultDiv.classList.add('hidden');
    }, 3000);
}

// –ü–æ–∫–∞–∑ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
function showLevelUp() {
    tg.showAlert(`üéâ ${currentPet.name} –¥–æ—Å—Ç–∏–≥ —É—Ä–æ–≤–Ω—è ${currentPet.level}!`);
}

// –ü–æ–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function showSuccess(message) {
    tg.showAlert(message);
}

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(message) {
    tg.showAlert('‚ùå ' + message);
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∏—Ç–æ–º—Ü–∞
function updatePetStatsOverTime() {
    if (!currentPet) return;
    
    const lastUpdated = new Date(currentPet.lastUpdated);
    const now = new Date();
    const hoursPassed = (now - lastUpdated) / (1000 * 60 * 60);
    
    if (hoursPassed < 0.1) return; // –ú–µ–Ω—å—à–µ 6 –º–∏–Ω—É—Ç
    
    // –°–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤
    const rates = {
        cat: { hunger: 2, happiness: 1.5, energy: 1.8 },
        dog: { hunger: 2.5, happiness: 1.2, energy: 2.0 },
        rabbit: { hunger: 1.8, happiness: 2.0, energy: 1.5 }
    };
    
    const rate = rates[currentPet.type];
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const hungerDecrease = Math.floor(hoursPassed * rate.hunger);
    const happinessDecrease = Math.floor(hoursPassed * rate.happiness);
    const energyDecrease = Math.floor(hoursPassed * rate.energy);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    currentPet.hunger = Math.max(0, currentPet.hunger - hungerDecrease);
    currentPet.happiness = Math.max(0, currentPet.happiness - happinessDecrease);
    currentPet.energy = Math.max(0, currentPet.energy - energyDecrease);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    currentPet.lastUpdated = now.toISOString();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    localStorage.setItem('pet_data', JSON.stringify(currentPet));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updatePetDisplay();
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
setInterval(updatePetStatsOverTime, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Telegram
tg.onEvent('viewportChanged', function() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
});

tg.onEvent('themeChanged', function() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
window.showScreen = showScreen;
window.copyMyId = copyMyId;
window.createCouple = createCouple;
window.performAction = performAction; 
